<?php

namespace OC\NAOBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
  public function lastObs() {
    $qb = $this->createQueryBuilder('e');
    $qb->select('e')->where('e.status = 1')->leftJoin('e.picture', 'picture')->addSelect('picture')->orderBy('e.datetime', 'DESC')->setMaxResults(10);

    return $qb->getQuery()->getResult();
  }

  public function listeObsEspece($espece) {
    $qb = $this->createQueryBuilder('lo');
    $qb->select('lo')->where('lo.taxrefname = :espece')->setParameter('espece', $espece)->orderBy('lo.datetime', 'DESC')->andWhere('lo.status = 1');

    return $qb->getQuery()->getResult();
  }

  public function nbObsUser($user) {
    $qb = $this->createQueryBuilder('u');
    $qb->select('COUNT(u)')->where('u.user = :user')->setParameter('user', $user)->andWhere('u.status = 1');

    return $qb->getQuery()->getSingleScalarResult();
  }

  public function observation($id)
  {
    $qb = $this->createQueryBuilder('ob');
    $qb->select('ob')->where('ob.id = :id')->setParameter('id', $id);

    return $qb->getQuery()->getResult();
  }

  public function validationObservation($id)
  {
    $qb = $this->createQueryBuilder('ob');
    $qb->select('ob')->where('ob.id = :id')->setParameter('id', $id)->andWhere('ob.status = 0');

    return $qb->getQuery()->getResult();
  }

  //la liste des observations valider pour un Utilisateur
  public function getuserObservation($user, $page, $nbPerPage)
  {
    $qb = $this->createQueryBuilder('userobservation');
    $qb->where('userobservation.user = :user')
          ->setParameter('user', $user)
      ->andWhere('userobservation.status = 1')
      ->orderBy('userobservation.datetime', 'DESC')
      ;
    $qb
      // On définit l'annonce à partir de laquelle commencer la liste
      ->setFirstResult(($page-1) * $nbPerPage)
      // Ainsi que le nombre d'annonce à afficher sur une page
      ->setMaxResults($nbPerPage)
    ;

    // On retourne l'objet Paginator correspondant à la requête construite
    return new Paginator($qb, true);
  }

  //la liste des observations non conforme pour un Utilisateur
  public function getUserObservationRefuse($user, $page, $nbPerPage)
  {
    $qb = $this->createQueryBuilder('userobservationrefused');
    $qb->where('userobservationrefused.user = :user')
          ->setParameter('user', $user)
      ->andWhere('userobservationrefused.status = 0')
      ->andWhere('userobservationrefused.notconforme = 1')
      ->orderBy('userobservationrefused.datetime', 'DESC')
      ;
      $qb->setFirstResult(($page-1) * $nbPerPage)->setMaxResults($nbPerPage);
      return new Paginator($qb, true);
  }

  //la liste des observations en attente pour un Observateur
  public function getUserPendingObservation($user, $page, $nbPerPage)
  {
    $qb = $this->createQueryBuilder('userpendingobservation');
    $qb->where('userpendingobservation.user = :user')
          ->setParameter('user', $user)
      ->andWhere('userpendingobservation.status = 0')
      ->andWhere('userpendingobservation.notconforme != 1')
      ->orderBy('userpendingobservation.datetime', 'DESC')
      ;
    $qb->setFirstResult(($page-1) * $nbPerPage)->setMaxResults($nbPerPage);
    return new Paginator($qb, true);
  }

  //la liste des observations valider par un naturaliste ou administrateur
  public function getUserObservationValidate($user, $page, $nbPerPage)
  {
    $qb = $this->createQueryBuilder('userobservationvalidate');
    // $qb->where('userobservationvalidate.uservalidator = :uservalidator')
    //       ->setParameter('uservalidator', $user)
    //   ->andWhere('userobservationvalidate.user != :user')
    //     ->setParameter('user', $user)
    //   ->orderBy('userobservationvalidate.datetime', 'DESC')
    //   ;
      $qb->where('userobservationvalidate.uservalidator = :uservalidator')
            ->setParameter('uservalidator', $user)
        ->andWhere('userobservationvalidate.user != :user')
          ->setParameter('user', $user)
        ->orderBy('userobservationvalidate.datetime', 'DESC')
        ;
    $qb->setFirstResult(($page-1) * $nbPerPage)->setMaxResults($nbPerPage);
    return new Paginator($qb, true);
  }

  //la liste des observations en attente de validation
  public function ObservationAtValidate($user, $page, $nbPerPage)
  {
    $qb = $this->createQueryBuilder('observationatvalidate');
    $qb->where('observationatvalidate.status = 0')
        ->andWhere('observationatvalidate.notconforme != 1')
        ->orderBy('observationatvalidate.datetime', 'DESC')
      ;
    $qb->setFirstResult(($page-1) * $nbPerPage)->setMaxResults($nbPerPage);
    return new Paginator($qb, true);
  }

}
